on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

name: Release

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.prepare.outputs.release_created }}
      version: ${{ steps.prepare.outputs.tag_name }}
    steps:
      - name: Prepare release
        id: prepare
        uses: google-github-actions/release-please-action@v3
        with:
          release-type: rust
          package-name: nforwardauth
          pull-request-header: Prepared Release
          changelog-types: '[{"type":"feat","section":"Features"},{"type":"fix","section":"Bug Fixes"},{"type":"doc","section":"Documentation"},{"type":"perf","section":"Performance"},{"type":"refactor","section":"Refactor"},{"type":"test","section":"Testing"},{"type":"chore","section":"Miscellaneous Tasks"},{"type":"ci","section":"CI/CD"}]'
  build-docker:
    name: Build Docker
    runs-on: ubuntu-22.04
    needs: [prepare]
    if: ${{ needs.prepare.outputs.release }}
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          tags: nosduco/nforwardauth:latest,nosduco/nforwardauth:v1,nosduco/nforwardauth:${{ needs.prepare.outputs.version }}
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-22.04
    needs: [prepare]
    if: ${{ needs.prepare.outputs.release }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-musl
            OS: ubuntu-latest
          - TARGET: armv7-unknown-linux-gnueabihf
            OS: ubuntu-latest
          - TARGET: armv7-unknown-linux-musleabihf
            OS: ubuntu-latest
          - TARGET: arm-unknown-linux-gnueabihf
            OS: ubuntu-latest
          - TARGET: arm-unknown-linux-musleabihf
            OS: ubuntu-latest
          # - TARGET: x86_64-apple-darwin
          #   OS: macos-latest
    env:
      NAME: nforwardauth
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v5
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          EXEC=$NAME
          TAG=${{ needs.prepare.outputs.version }}
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz $EXEC
      - name: Upload artifact to release
        if: ${{ needs.prepare.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ needs.prepare.outputs.version }}
          gh release upload ${{ needs.prepare.outputs.version }} ./artifacts/$NAME-$TARGET-$TAG.tar.gz
